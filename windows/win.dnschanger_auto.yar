rule win_dnschanger_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.dnschanger."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.dnschanger"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 83f804 7505 e8???????? e8???????? 83f808 }
            // n = 5, score = 100
            //   83f804               | cmp                 eax, 4
            //   7505                 | jne                 7
            //   e8????????           |                     
            //   e8????????           |                     
            //   83f808               | cmp                 eax, 8

        $sequence_1 = { 8810 41 84d2 7407 8a11 8816 46 }
            // n = 7, score = 100
            //   8810                 | mov                 byte ptr [eax], dl
            //   41                   | inc                 ecx
            //   84d2                 | test                dl, dl
            //   7407                 | je                  9
            //   8a11                 | mov                 dl, byte ptr [ecx]
            //   8816                 | mov                 byte ptr [esi], dl
            //   46                   | inc                 esi

        $sequence_2 = { ff15???????? a1???????? 5f 5e 5d 85c0 }
            // n = 6, score = 100
            //   ff15????????         |                     
            //   a1????????           |                     
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   5d                   | pop                 ebp
            //   85c0                 | test                eax, eax

        $sequence_3 = { 8d542408 52 e8???????? 85c0 }
            // n = 4, score = 100
            //   8d542408             | lea                 edx, [esp + 8]
            //   52                   | push                edx
            //   e8????????           |                     
            //   85c0                 | test                eax, eax

        $sequence_4 = { 32c0 c9 c3 56 8d8500ffffff 6800010000 50 }
            // n = 7, score = 100
            //   32c0                 | xor                 al, al
            //   c9                   | leave               
            //   c3                   | ret                 
            //   56                   | push                esi
            //   8d8500ffffff         | lea                 eax, [ebp - 0x100]
            //   6800010000           | push                0x100
            //   50                   | push                eax

        $sequence_5 = { 8b0d???????? 8b15???????? 89442400 66a1???????? }
            // n = 4, score = 100
            //   8b0d????????         |                     
            //   8b15????????         |                     
            //   89442400             | mov                 dword ptr [esp], eax
            //   66a1????????         |                     

        $sequence_6 = { 85ff 7422 85db 7411 8b4500 68???????? 50 }
            // n = 7, score = 100
            //   85ff                 | test                edi, edi
            //   7422                 | je                  0x24
            //   85db                 | test                ebx, ebx
            //   7411                 | je                  0x13
            //   8b4500               | mov                 eax, dword ptr [ebp]
            //   68????????           |                     
            //   50                   | push                eax

        $sequence_7 = { c60020 8b2d???????? 68???????? 68???????? }
            // n = 4, score = 100
            //   c60020               | mov                 byte ptr [eax], 0x20
            //   8b2d????????         |                     
            //   68????????           |                     
            //   68????????           |                     

        $sequence_8 = { 56 57 894c240c 6689442414 b91a000000 33c0 8d7c2416 }
            // n = 7, score = 100
            //   56                   | push                esi
            //   57                   | push                edi
            //   894c240c             | mov                 dword ptr [esp + 0xc], ecx
            //   6689442414           | mov                 word ptr [esp + 0x14], ax
            //   b91a000000           | mov                 ecx, 0x1a
            //   33c0                 | xor                 eax, eax
            //   8d7c2416             | lea                 edi, [esp + 0x16]

        $sequence_9 = { 8b442428 6a30 50 57 }
            // n = 4, score = 100
            //   8b442428             | mov                 eax, dword ptr [esp + 0x28]
            //   6a30                 | push                0x30
            //   50                   | push                eax
            //   57                   | push                edi

    condition:
        7 of them and filesize < 49152
}