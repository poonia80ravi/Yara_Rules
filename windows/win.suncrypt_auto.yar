rule win_suncrypt_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.suncrypt."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.suncrypt"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c645fa75 c645fb76 c645fc6c c645fd72 c645fe71 c645ff00 8a45f2 }
            // n = 7, score = 200
            //   c645fa75             | mov                 byte ptr [ebp - 6], 0x75
            //   c645fb76             | mov                 byte ptr [ebp - 5], 0x76
            //   c645fc6c             | mov                 byte ptr [ebp - 4], 0x6c
            //   c645fd72             | mov                 byte ptr [ebp - 3], 0x72
            //   c645fe71             | mov                 byte ptr [ebp - 2], 0x71
            //   c645ff00             | mov                 byte ptr [ebp - 1], 0
            //   8a45f2               | mov                 al, byte ptr [ebp - 0xe]

        $sequence_1 = { 8bec 8b4d08 8b450c 51 c7410800000000 c7410c00000000 c7411000000000 }
            // n = 7, score = 200
            //   8bec                 | mov                 ebp, esp
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   51                   | push                ecx
            //   c7410800000000       | mov                 dword ptr [ecx + 8], 0
            //   c7410c00000000       | mov                 dword ptr [ecx + 0xc], 0
            //   c7411000000000       | mov                 dword ptr [ecx + 0x10], 0

        $sequence_2 = { c68553ffffff80 c68554ffffff17 c68555ffffff00 8a853cffffff 8a840d3cffffff 0fbec0 83e80d }
            // n = 7, score = 200
            //   c68553ffffff80       | mov                 byte ptr [ebp - 0xad], 0x80
            //   c68554ffffff17       | mov                 byte ptr [ebp - 0xac], 0x17
            //   c68555ffffff00       | mov                 byte ptr [ebp - 0xab], 0
            //   8a853cffffff         | mov                 al, byte ptr [ebp - 0xc4]
            //   8a840d3cffffff       | mov                 al, byte ptr [ebp + ecx - 0xc4]
            //   0fbec0               | movsx               eax, al
            //   83e80d               | sub                 eax, 0xd

        $sequence_3 = { 0f8e2b020000 8b45bc 8b4dac 8b55b0 8945f8 8b45b8 894df0 }
            // n = 7, score = 200
            //   0f8e2b020000         | jle                 0x231
            //   8b45bc               | mov                 eax, dword ptr [ebp - 0x44]
            //   8b4dac               | mov                 ecx, dword ptr [ebp - 0x54]
            //   8b55b0               | mov                 edx, dword ptr [ebp - 0x50]
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   8b45b8               | mov                 eax, dword ptr [ebp - 0x48]
            //   894df0               | mov                 dword ptr [ebp - 0x10], ecx

        $sequence_4 = { 57 c78564ffffff32000000 8b8564ffffff 83f06e 888568ffffff 8b8564ffffff }
            // n = 6, score = 200
            //   57                   | push                edi
            //   c78564ffffff32000000     | mov    dword ptr [ebp - 0x9c], 0x32
            //   8b8564ffffff         | mov                 eax, dword ptr [ebp - 0x9c]
            //   83f06e               | xor                 eax, 0x6e
            //   888568ffffff         | mov                 byte ptr [ebp - 0x98], al
            //   8b8564ffffff         | mov                 eax, dword ptr [ebp - 0x9c]

        $sequence_5 = { 83c408 85c0 0f84cb000000 ff7008 e8???????? }
            // n = 5, score = 200
            //   83c408               | add                 esp, 8
            //   85c0                 | test                eax, eax
            //   0f84cb000000         | je                  0xd1
            //   ff7008               | push                dword ptr [eax + 8]
            //   e8????????           |                     

        $sequence_6 = { 0405 83f076 8845e9 8b45e0 0406 }
            // n = 5, score = 200
            //   0405                 | add                 al, 5
            //   83f076               | xor                 eax, 0x76
            //   8845e9               | mov                 byte ptr [ebp - 0x17], al
            //   8b45e0               | mov                 eax, dword ptr [ebp - 0x20]
            //   0406                 | add                 al, 6

        $sequence_7 = { 8d7714 668906 8bd3 8bc3 c1e802 }
            // n = 5, score = 200
            //   8d7714               | lea                 esi, [edi + 0x14]
            //   668906               | mov                 word ptr [esi], ax
            //   8bd3                 | mov                 edx, ebx
            //   8bc3                 | mov                 eax, ebx
            //   c1e802               | shr                 eax, 2

        $sequence_8 = { 83c41c 8d83b4000100 0f57c0 0f11459c ff7508 0f1145ac 50 }
            // n = 7, score = 200
            //   83c41c               | add                 esp, 0x1c
            //   8d83b4000100         | lea                 eax, [ebx + 0x100b4]
            //   0f57c0               | xorps               xmm0, xmm0
            //   0f11459c             | movups              xmmword ptr [ebp - 0x64], xmm0
            //   ff7508               | push                dword ptr [ebp + 8]
            //   0f1145ac             | movups              xmmword ptr [ebp - 0x54], xmm0
            //   50                   | push                eax

        $sequence_9 = { 57 ff15???????? 83c414 f685f4fcffff10 740b 57 e8???????? }
            // n = 7, score = 200
            //   57                   | push                edi
            //   ff15????????         |                     
            //   83c414               | add                 esp, 0x14
            //   f685f4fcffff10       | test                byte ptr [ebp - 0x30c], 0x10
            //   740b                 | je                  0xd
            //   57                   | push                edi
            //   e8????????           |                     

    condition:
        7 of them and filesize < 172032
}