rule win_amadey_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.amadey."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.amadey"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e8???????? 8d85f89fffff 890424 e8???????? }
            // n = 4, score = 700
            //   e8????????           |                     
            //   8d85f89fffff         | lea                 eax, [ebp - 0x6008]
            //   890424               | mov                 dword ptr [esp], eax
            //   e8????????           |                     

        $sequence_1 = { 89e5 56 53 83ec10 89e6 }
            // n = 5, score = 700
            //   89e5                 | mov                 ebp, esp
            //   56                   | push                esi
            //   53                   | push                ebx
            //   83ec10               | sub                 esp, 0x10
            //   89e6                 | mov                 esi, esp

        $sequence_2 = { e8???????? 8d85e8fbffff 890424 e8???????? 89c3 }
            // n = 5, score = 700
            //   e8????????           |                     
            //   8d85e8fbffff         | lea                 eax, [ebp - 0x418]
            //   890424               | mov                 dword ptr [esp], eax
            //   e8????????           |                     
            //   89c3                 | mov                 ebx, eax

        $sequence_3 = { 55 89e5 b828600000 e8???????? c785f49fffff00000000 c785f09fffffffffffff }
            // n = 6, score = 700
            //   55                   | push                ebp
            //   89e5                 | mov                 ebp, esp
            //   b828600000           | mov                 eax, 0x6028
            //   e8????????           |                     
            //   c785f49fffff00000000     | mov    dword ptr [ebp - 0x600c], 0
            //   c785f09fffffffffffff     | mov    dword ptr [ebp - 0x6010], 0xffffffff

        $sequence_4 = { 8d85f8fbffff 890424 e8???????? 8b4510 890424 }
            // n = 5, score = 700
            //   8d85f8fbffff         | lea                 eax, [ebp - 0x408]
            //   890424               | mov                 dword ptr [esp], eax
            //   e8????????           |                     
            //   8b4510               | mov                 eax, dword ptr [ebp + 0x10]
            //   890424               | mov                 dword ptr [esp], eax

        $sequence_5 = { 751c 807df201 750c c705????????03000000 eb0a c705????????04000000 }
            // n = 6, score = 700
            //   751c                 | jne                 0x1e
            //   807df201             | cmp                 byte ptr [ebp - 0xe], 1
            //   750c                 | jne                 0xe
            //   c705????????03000000     |     
            //   eb0a                 | jmp                 0xc
            //   c705????????04000000     |     

        $sequence_6 = { 750a c705????????0f000000 a1???????? 898514ffffff 8b8514ffffff c9 }
            // n = 6, score = 700
            //   750a                 | jne                 0xc
            //   c705????????0f000000     |     
            //   a1????????           |                     
            //   898514ffffff         | mov                 dword ptr [ebp - 0xec], eax
            //   8b8514ffffff         | mov                 eax, dword ptr [ebp - 0xec]
            //   c9                   | leave               

        $sequence_7 = { 7407 c745fc01000000 c70424???????? e8???????? }
            // n = 4, score = 700
            //   7407                 | je                  9
            //   c745fc01000000       | mov                 dword ptr [ebp - 4], 1
            //   c70424????????       |                     
            //   e8????????           |                     

        $sequence_8 = { 48 89442408 c744240401000000 8d85f8dfffff }
            // n = 4, score = 700
            //   48                   | dec                 eax
            //   89442408             | mov                 dword ptr [esp + 8], eax
            //   c744240401000000     | mov                 dword ptr [esp + 4], 1
            //   8d85f8dfffff         | lea                 eax, [ebp - 0x2008]

        $sequence_9 = { 7416 8d8528ffffff 890424 8b8524ffffff }
            // n = 4, score = 700
            //   7416                 | je                  0x18
            //   8d8528ffffff         | lea                 eax, [ebp - 0xd8]
            //   890424               | mov                 dword ptr [esp], eax
            //   8b8524ffffff         | mov                 eax, dword ptr [ebp - 0xdc]

    condition:
        7 of them and filesize < 264192
}