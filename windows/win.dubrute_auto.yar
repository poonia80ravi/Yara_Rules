rule win_dubrute_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.dubrute."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.dubrute"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 33ff ff450c 8345f828 8b450c 3b4348 7c81 }
            // n = 6, score = 100
            //   33ff                 | xor                 edi, edi
            //   ff450c               | inc                 dword ptr [ebp + 0xc]
            //   8345f828             | add                 dword ptr [ebp - 8], 0x28
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   3b4348               | cmp                 eax, dword ptr [ebx + 0x48]
            //   7c81                 | jl                  0xffffff83

        $sequence_1 = { 7c1d 47 3b7d10 7ce6 ff7518 8d45bc 2bf0 }
            // n = 7, score = 100
            //   7c1d                 | jl                  0x1f
            //   47                   | inc                 edi
            //   3b7d10               | cmp                 edi, dword ptr [ebp + 0x10]
            //   7ce6                 | jl                  0xffffffe8
            //   ff7518               | push                dword ptr [ebp + 0x18]
            //   8d45bc               | lea                 eax, [ebp - 0x44]
            //   2bf0                 | sub                 esi, eax

        $sequence_2 = { 2bc8 d3fe e9???????? 6a18 59 3bc1 }
            // n = 6, score = 100
            //   2bc8                 | sub                 ecx, eax
            //   d3fe                 | sar                 esi, cl
            //   e9????????           |                     
            //   6a18                 | push                0x18
            //   59                   | pop                 ecx
            //   3bc1                 | cmp                 eax, ecx

        $sequence_3 = { 8365e400 8ac1 894dfc 2407 8165fc00010000 8845e0 8ac1 }
            // n = 7, score = 100
            //   8365e400             | and                 dword ptr [ebp - 0x1c], 0
            //   8ac1                 | mov                 al, cl
            //   894dfc               | mov                 dword ptr [ebp - 4], ecx
            //   2407                 | and                 al, 7
            //   8165fc00010000       | and                 dword ptr [ebp - 4], 0x100
            //   8845e0               | mov                 byte ptr [ebp - 0x20], al
            //   8ac1                 | mov                 al, cl

        $sequence_4 = { 85c9 7405 8b4108 eb02 33c0 85c0 }
            // n = 6, score = 100
            //   85c9                 | test                ecx, ecx
            //   7405                 | je                  7
            //   8b4108               | mov                 eax, dword ptr [ecx + 8]
            //   eb02                 | jmp                 4
            //   33c0                 | xor                 eax, eax
            //   85c0                 | test                eax, eax

        $sequence_5 = { ff450c 59 395d0c 72b5 8b06 0fb638 ff06 }
            // n = 7, score = 100
            //   ff450c               | inc                 dword ptr [ebp + 0xc]
            //   59                   | pop                 ecx
            //   395d0c               | cmp                 dword ptr [ebp + 0xc], ebx
            //   72b5                 | jb                  0xffffffb7
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   0fb638               | movzx               edi, byte ptr [eax]
            //   ff06                 | inc                 dword ptr [esi]

        $sequence_6 = { 81c300040000 53 ff750c e8???????? 59 59 53 }
            // n = 7, score = 100
            //   81c300040000         | add                 ebx, 0x400
            //   53                   | push                ebx
            //   ff750c               | push                dword ptr [ebp + 0xc]
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   59                   | pop                 ecx
            //   53                   | push                ebx

        $sequence_7 = { 68???????? ffd3 83c40c 837c241c00 7414 68c5010000 68???????? }
            // n = 7, score = 100
            //   68????????           |                     
            //   ffd3                 | call                ebx
            //   83c40c               | add                 esp, 0xc
            //   837c241c00           | cmp                 dword ptr [esp + 0x1c], 0
            //   7414                 | je                  0x16
            //   68c5010000           | push                0x1c5
            //   68????????           |                     

        $sequence_8 = { 56 57 bf???????? 8bf1 57 e8???????? 59 }
            // n = 7, score = 100
            //   56                   | push                esi
            //   57                   | push                edi
            //   bf????????           |                     
            //   8bf1                 | mov                 esi, ecx
            //   57                   | push                edi
            //   e8????????           |                     
            //   59                   | pop                 ecx

        $sequence_9 = { e8???????? 8b06 56 57 894604 e8???????? 83c420 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   56                   | push                esi
            //   57                   | push                edi
            //   894604               | mov                 dword ptr [esi + 4], eax
            //   e8????????           |                     
            //   83c420               | add                 esp, 0x20

    condition:
        7 of them and filesize < 598016
}