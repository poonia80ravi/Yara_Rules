rule win_tinymet_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.tinymet."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.tinymet"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 53 8b1d???????? 6a04 68???????? 56 8975fc ffd3 }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   8b1d????????         |                     
            //   6a04                 | push                4
            //   68????????           |                     
            //   56                   | push                esi
            //   8975fc               | mov                 dword ptr [ebp - 4], esi
            //   ffd3                 | call                ebx

        $sequence_1 = { 33db 56 57 885df0 895df1 885de8 }
            // n = 6, score = 100
            //   33db                 | xor                 ebx, ebx
            //   56                   | push                esi
            //   57                   | push                edi
            //   885df0               | mov                 byte ptr [ebp - 0x10], bl
            //   895df1               | mov                 dword ptr [ebp - 0xf], ebx
            //   885de8               | mov                 byte ptr [ebp - 0x18], bl

        $sequence_2 = { 6a04 c600bf 8d45fc 50 }
            // n = 4, score = 100
            //   6a04                 | push                4
            //   c600bf               | mov                 byte ptr [eax], 0xbf
            //   8d45fc               | lea                 eax, [ebp - 4]
            //   50                   | push                eax

        $sequence_3 = { 6a10 50 56 385d10 }
            // n = 4, score = 100
            //   6a10                 | push                0x10
            //   50                   | push                eax
            //   56                   | push                esi
            //   385d10               | cmp                 byte ptr [ebp + 0x10], bl

        $sequence_4 = { e8???????? 83c410 b80033a084 385d10 be00022084 }
            // n = 5, score = 100
            //   e8????????           |                     
            //   83c410               | add                 esp, 0x10
            //   b80033a084           | mov                 eax, 0x84a03300
            //   385d10               | cmp                 byte ptr [ebp + 0x10], bl
            //   be00022084           | mov                 esi, 0x84200200

        $sequence_5 = { 53 53 53 8d4de8 51 68???????? 50 }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   53                   | push                ebx
            //   53                   | push                ebx
            //   8d4de8               | lea                 ecx, [ebp - 0x18]
            //   51                   | push                ecx
            //   68????????           |                     
            //   50                   | push                eax

        $sequence_6 = { 53 53 53 68???????? ff15???????? 8bf8 85ff }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   53                   | push                ebx
            //   53                   | push                ebx
            //   68????????           |                     
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   85ff                 | test                edi, edi

        $sequence_7 = { ff35???????? e8???????? 83c40c a3???????? ffd0 }
            // n = 5, score = 100
            //   ff35????????         |                     
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   a3????????           |                     
            //   ffd0                 | call                eax

    condition:
        7 of them and filesize < 57344
}