rule win_urlzone_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.urlzone."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.urlzone"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { b119 b20d b005 e8???????? }
            // n = 4, score = 3000
            //   b119                 | mov                 cl, 0x19
            //   b20d                 | mov                 dl, 0xd
            //   b005                 | mov                 al, 5
            //   e8????????           |                     

        $sequence_1 = { 80c00a eb10 80f861 7c11 80f866 7f0c 80e861 }
            // n = 7, score = 3000
            //   80c00a               | add                 al, 0xa
            //   eb10                 | jmp                 0x12
            //   80f861               | cmp                 al, 0x61
            //   7c11                 | jl                  0x13
            //   80f866               | cmp                 al, 0x66
            //   7f0c                 | jg                  0xe
            //   80e861               | sub                 al, 0x61

        $sequence_2 = { 80fc39 7f05 80ec30 eb22 }
            // n = 4, score = 3000
            //   80fc39               | cmp                 ah, 0x39
            //   7f05                 | jg                  7
            //   80ec30               | sub                 ah, 0x30
            //   eb22                 | jmp                 0x24

        $sequence_3 = { 80e930 80f909 7708 8d0480 }
            // n = 4, score = 3000
            //   80e930               | sub                 cl, 0x30
            //   80f909               | cmp                 cl, 9
            //   7708                 | ja                  0xa
            //   8d0480               | lea                 eax, [eax + eax*4]

        $sequence_4 = { eb10 80f861 7c11 80f866 7f0c 80e861 80c00a }
            // n = 7, score = 3000
            //   eb10                 | jmp                 0x12
            //   80f861               | cmp                 al, 0x61
            //   7c11                 | jl                  0x13
            //   80f866               | cmp                 al, 0x66
            //   7f0c                 | jg                  0xe
            //   80e861               | sub                 al, 0x61
            //   80c00a               | add                 al, 0xa

        $sequence_5 = { 9c 7405 80f92b 7503 8a0a 42 80e930 }
            // n = 7, score = 3000
            //   9c                   | pushfd              
            //   7405                 | je                  7
            //   80f92b               | cmp                 cl, 0x2b
            //   7503                 | jne                 5
            //   8a0a                 | mov                 cl, byte ptr [edx]
            //   42                   | inc                 edx
            //   80e930               | sub                 cl, 0x30

        $sequence_6 = { 31c0 85d2 7428 31c9 8a0a }
            // n = 5, score = 3000
            //   31c0                 | xor                 eax, eax
            //   85d2                 | test                edx, edx
            //   7428                 | je                  0x2a
            //   31c9                 | xor                 ecx, ecx
            //   8a0a                 | mov                 cl, byte ptr [edx]

        $sequence_7 = { 5f 5e c3 57 51 89c7 }
            // n = 6, score = 3000
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   c3                   | ret                 
            //   57                   | push                edi
            //   51                   | push                ecx
            //   89c7                 | mov                 edi, eax

        $sequence_8 = { a1???????? f7d8 1bc0 f7d8 }
            // n = 4, score = 3000
            //   a1????????           |                     
            //   f7d8                 | neg                 eax
            //   1bc0                 | sbb                 eax, eax
            //   f7d8                 | neg                 eax

        $sequence_9 = { 7503 8a0a 42 80e930 80f909 7708 8d0480 }
            // n = 7, score = 3000
            //   7503                 | jne                 5
            //   8a0a                 | mov                 cl, byte ptr [edx]
            //   42                   | inc                 edx
            //   80e930               | sub                 cl, 0x30
            //   80f909               | cmp                 cl, 9
            //   7708                 | ja                  0xa
            //   8d0480               | lea                 eax, [eax + eax*4]

    condition:
        7 of them and filesize < 704512
}