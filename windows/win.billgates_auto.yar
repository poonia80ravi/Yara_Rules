rule win_billgates_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-10-07"
        version = "1"
        description = "Detects win.billgates."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.billgates"
        malpedia_rule_date = "20221007"
        malpedia_hash = "597f9539014e3d0f350c069cd804aa71679486ae"
        malpedia_version = "20221010"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 3c21 7408 3c23 7404 }
            // n = 4, score = 200
            //   3c21                 | cdq                 
            //   7408                 | cmp                 eax, esi
            //   3c23                 | je                  0x2e
            //   7404                 | mov                 edx, dword ptr [esp + 0x68]

        $sequence_1 = { 3c11 7408 3c22 7404 3c30 }
            // n = 5, score = 200
            //   3c11                 | mov                 byte ptr [esp + 0x67], 0x41
            //   7408                 | mov                 byte ptr [esp + 0x68], 0x35
            //   3c22                 | mov                 byte ptr [esp + 0x69], 0x44
            //   7404                 | mov                 byte ptr [esp + 0x67], 0x32
            //   3c30                 | mov                 byte ptr [esp + 0x68], 0x38

        $sequence_2 = { 7604 2bf0 eb04 2bc6 8bf0 }
            // n = 5, score = 200
            //   7604                 | mov                 dword ptr [esp + 0x48], eax
            //   2bf0                 | dec                 eax
            //   eb04                 | lea                 edx, [edi + 0x128]
            //   2bc6                 | dec                 eax
            //   8bf0                 | lea                 ecx, [esp + 0x78]

        $sequence_3 = { 740c 3c11 7408 3c22 7404 3c30 }
            // n = 6, score = 200
            //   740c                 | dec                 eax
            //   3c11                 | dec                 edi
            //   7408                 | dec                 eax
            //   3c22                 | add                 ebx, 0x30
            //   7404                 | dec                 eax
            //   3c30                 | mov                 ecx, ebx

        $sequence_4 = { 3c10 740c 3c11 7408 }
            // n = 4, score = 200
            //   3c10                 | cmp                 eax, esi
            //   740c                 | jae                 0x2d6
            //   3c11                 | inc                 ecx
            //   7408                 | mov                 eax, dword ptr [ecx]

        $sequence_5 = { 3bf0 7604 2bf0 eb04 }
            // n = 4, score = 200
            //   3bf0                 | dec                 eax
            //   7604                 | mov                 ecx, ebx
            //   2bf0                 | cmp                 eax, dword ptr [ebp + 0xb8]
            //   eb04                 | jne                 0x136

        $sequence_6 = { 7604 2bf0 eb04 2bc6 }
            // n = 4, score = 200
            //   7604                 | lea                 edx, [eax + 0xc8]
            //   2bf0                 | dec                 ecx
            //   eb04                 | or                  ecx, 0xffffffff
            //   2bc6                 | inc                 ebp

        $sequence_7 = { 2bf0 eb04 2bc6 8bf0 }
            // n = 4, score = 200
            //   2bf0                 | jne                 0x1ef
            //   eb04                 | sub                 eax, dword ptr [edx + ecx*8 + 0x1c]
            //   2bc6                 | lea                 esi, [edx + ecx*8 + 0x10]
            //   8bf0                 | jne                 0x1f9

        $sequence_8 = { 3bf0 7604 2bf0 eb04 2bc6 }
            // n = 5, score = 200
            //   3bf0                 | lea                 eax, [esp + 0x34]
            //   7604                 | push                eax
            //   2bf0                 | mov                 byte ptr [esp + 0x40], 1
            //   eb04                 | dec                 eax
            //   2bc6                 | mov                 ecx, ebx

        $sequence_9 = { 3c10 740c 3c11 7408 3c22 7404 3c30 }
            // n = 7, score = 200
            //   3c10                 | dec                 eax
            //   740c                 | mov                 ebx, dword ptr [esp + 0x70]
            //   3c11                 | dec                 eax
            //   7408                 | cmp                 ecx, ebx
            //   3c22                 | nop                 
            //   7404                 | dec                 eax
            //   3c30                 | mov                 ecx, dword ptr [esp + 0x78]

    condition:
        7 of them and filesize < 801792
}